env:
    TERM: screen-256color-bce

window:
    dimensions:
        columns: 0
        lines: 0
    padding:
        x: 0
        y: 1
    dynamic_padding: false
    decorations: full
    dynamic_title: true

scrolling:
    history: 10000
    multiplier: 1

font:
    normal:
        family: Droid Sans Mono for Powerline
        style: Regular
    bold:
        style: Bold
    italic:
        style: Italic
    size: 12.0
    offset:
        x: 0
        y: 0
    glyph_offset:
        x: 0
        y: 0
    use_thin_strokes: false

debug.render_timer: false

# Keep the log file after quitting Alacritty.
debug.persistent_logging: false

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

colors:
    primary:
        background: '0x2E3440'
        foreground: '0xD8DEE9'
    cursor:
        text: '0x2E3440'
        cursor: '0xD8DEE9'
    normal:
        black: '0x3B4252'
        red: '0xBF616A'
        green: '0xA3BE8C'
        yellow: '0xEBCB8B'
        blue: '0x81A1C1'
        magenta: '0xB48EAD'
        cyan: '0x88C0D0'
        white: '0xE5E9F0'
    bright:
        black: '0x4C566A'
        red: '0xBF616A'
        green: '0xA3BE8C'
        yellow: '0xEBCB8B'
        blue: '0x81A1C1'
        magenta: '0xB48EAD'
        cyan: '0x8FBCBB'
        white: '0xECEFF4'

bell:
    animation: EaseOutExpo
    duration: 0
    color: '0xffffff'

background_opacity: 1.0

# mouse_bindings:
#     - { mouse: Middle, action: PasteSelection }

mouse:
    double_click: { threshold: 300 }
    triple_click: { threshold: 300 }

    # If this is `true`, the cursor is temporarily hidden when typing.
    hide_when_typing: false

    url:
        # These are the modifiers that need to be held down for opening URLs when clicking
        # on them. The available modifiers are documented in the key binding section.
        modifiers: Control

selection:
    semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"

    # When set to `true`, selected text will be copied to the primary clipboard.
    save_to_clipboard: false

cursor:
    style: Underline
    unfocused_hollow: true

live_config_reload: false

enable_experimental_conpty_backend: true

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - None
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
key_bindings:
  - { key: Paste,                   action: Paste                        }
  - { key: Copy,                    action: Copy                         }

  - { key: L,        mods: Control, action: ClearLogNotice               }
  - { key: L,        mods: Control, chars: "\x0c"                        }

  - { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
  - { key: Home,                    chars: "\x1b[H",   mode: ~AppCursor  }

  - { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
  - { key: End,                     chars: "\x1b[F",   mode: ~AppCursor  }

  - { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~"                   }
  - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                   }
  - { key: PageUp,                  chars: "\x1b[5~"                     }

  - { key: PageDown, mods: Shift,   chars: "\x1b[6;2~"                   }
  - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                   }
  - { key: PageDown,                chars: "\x1b[6~"                     }

  - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
  - { key: Insert,                  chars: "\x1b[2~"                     }
  - { key: Delete,                  chars: "\x1b[3~"                     }

  - { key: Back,                    chars: "\x7f"                        }
  - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                    }

  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
  - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
  - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
  - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }

  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
  - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
  - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
  - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }

  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
  - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
  - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
  - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }

  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
  - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
  - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
  - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }

  - { key: NumpadEnter,             chars: "\n"                          }
